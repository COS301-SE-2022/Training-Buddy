
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model activityStatistic
 * 
 */
export type activityStatistic = {
  activity: string
  user: string
  timeSpent: Prisma.Decimal
  experienceLevel: string
  insight: string | null
}

/**
 * Model activityType
 * 
 */
export type activityType = {
  activityName: string
  distanceOrientated: boolean
}

/**
 * Model user
 * 
 */
export type user = {
  email: string
  firstName: string
  lastName: string
  contactNumber: Prisma.Decimal
  gender: string
  location: string
  password: string
  dateOfBirth: string
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more ActivityStatistics
 * const activityStatistics = await prisma.activityStatistic.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more ActivityStatistics
   * const activityStatistics = await prisma.activityStatistic.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.activityStatistic`: Exposes CRUD operations for the **activityStatistic** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ActivityStatistics
    * const activityStatistics = await prisma.activityStatistic.findMany()
    * ```
    */
  get activityStatistic(): Prisma.activityStatisticDelegate<GlobalReject>;

  /**
   * `prisma.activityType`: Exposes CRUD operations for the **activityType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ActivityTypes
    * const activityTypes = await prisma.activityType.findMany()
    * ```
    */
  get activityType(): Prisma.activityTypeDelegate<GlobalReject>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **user** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.userDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 3.10.0
   * Query Engine version: 73e60b76d394f8d37d8ebd1f8918c79029f0db86
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: 'DbNull'

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: 'JsonNull'

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: 'AnyNull'

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    activityStatistic: 'activityStatistic',
    activityType: 'activityType',
    user: 'user'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends boolean
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ActivityTypeCountOutputType
   */


  export type ActivityTypeCountOutputType = {
    activityStatistic: number
  }

  export type ActivityTypeCountOutputTypeSelect = {
    activityStatistic?: boolean
  }

  export type ActivityTypeCountOutputTypeGetPayload<
    S extends boolean | null | undefined | ActivityTypeCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? ActivityTypeCountOutputType
    : S extends undefined
    ? never
    : S extends ActivityTypeCountOutputTypeArgs
    ?'include' extends U
    ? ActivityTypeCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof ActivityTypeCountOutputType ? ActivityTypeCountOutputType[P] : never
  } 
    : ActivityTypeCountOutputType
  : ActivityTypeCountOutputType




  // Custom InputTypes

  /**
   * ActivityTypeCountOutputType without action
   */
  export type ActivityTypeCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ActivityTypeCountOutputType
     * 
    **/
    select?: ActivityTypeCountOutputTypeSelect | null
  }



  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    activityStatistic: number
  }

  export type UserCountOutputTypeSelect = {
    activityStatistic?: boolean
  }

  export type UserCountOutputTypeGetPayload<
    S extends boolean | null | undefined | UserCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? UserCountOutputType
    : S extends undefined
    ? never
    : S extends UserCountOutputTypeArgs
    ?'include' extends U
    ? UserCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
    : UserCountOutputType
  : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     * 
    **/
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model activityStatistic
   */


  export type AggregateActivityStatistic = {
    _count: ActivityStatisticCountAggregateOutputType | null
    _avg: ActivityStatisticAvgAggregateOutputType | null
    _sum: ActivityStatisticSumAggregateOutputType | null
    _min: ActivityStatisticMinAggregateOutputType | null
    _max: ActivityStatisticMaxAggregateOutputType | null
  }

  export type ActivityStatisticAvgAggregateOutputType = {
    timeSpent: Decimal | null
  }

  export type ActivityStatisticSumAggregateOutputType = {
    timeSpent: Decimal | null
  }

  export type ActivityStatisticMinAggregateOutputType = {
    activity: string | null
    user: string | null
    timeSpent: Decimal | null
    experienceLevel: string | null
    insight: string | null
  }

  export type ActivityStatisticMaxAggregateOutputType = {
    activity: string | null
    user: string | null
    timeSpent: Decimal | null
    experienceLevel: string | null
    insight: string | null
  }

  export type ActivityStatisticCountAggregateOutputType = {
    activity: number
    user: number
    timeSpent: number
    experienceLevel: number
    insight: number
    _all: number
  }


  export type ActivityStatisticAvgAggregateInputType = {
    timeSpent?: true
  }

  export type ActivityStatisticSumAggregateInputType = {
    timeSpent?: true
  }

  export type ActivityStatisticMinAggregateInputType = {
    activity?: true
    user?: true
    timeSpent?: true
    experienceLevel?: true
    insight?: true
  }

  export type ActivityStatisticMaxAggregateInputType = {
    activity?: true
    user?: true
    timeSpent?: true
    experienceLevel?: true
    insight?: true
  }

  export type ActivityStatisticCountAggregateInputType = {
    activity?: true
    user?: true
    timeSpent?: true
    experienceLevel?: true
    insight?: true
    _all?: true
  }

  export type ActivityStatisticAggregateArgs = {
    /**
     * Filter which activityStatistic to aggregate.
     * 
    **/
    where?: activityStatisticWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of activityStatistics to fetch.
     * 
    **/
    orderBy?: Enumerable<activityStatisticOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: activityStatisticWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` activityStatistics from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` activityStatistics.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned activityStatistics
    **/
    _count?: true | ActivityStatisticCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ActivityStatisticAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ActivityStatisticSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ActivityStatisticMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ActivityStatisticMaxAggregateInputType
  }

  export type GetActivityStatisticAggregateType<T extends ActivityStatisticAggregateArgs> = {
        [P in keyof T & keyof AggregateActivityStatistic]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateActivityStatistic[P]>
      : GetScalarType<T[P], AggregateActivityStatistic[P]>
  }




  export type ActivityStatisticGroupByArgs = {
    where?: activityStatisticWhereInput
    orderBy?: Enumerable<activityStatisticOrderByWithAggregationInput>
    by: Array<ActivityStatisticScalarFieldEnum>
    having?: activityStatisticScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ActivityStatisticCountAggregateInputType | true
    _avg?: ActivityStatisticAvgAggregateInputType
    _sum?: ActivityStatisticSumAggregateInputType
    _min?: ActivityStatisticMinAggregateInputType
    _max?: ActivityStatisticMaxAggregateInputType
  }


  export type ActivityStatisticGroupByOutputType = {
    activity: string
    user: string
    timeSpent: Decimal
    experienceLevel: string
    insight: string | null
    _count: ActivityStatisticCountAggregateOutputType | null
    _avg: ActivityStatisticAvgAggregateOutputType | null
    _sum: ActivityStatisticSumAggregateOutputType | null
    _min: ActivityStatisticMinAggregateOutputType | null
    _max: ActivityStatisticMaxAggregateOutputType | null
  }

  type GetActivityStatisticGroupByPayload<T extends ActivityStatisticGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ActivityStatisticGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ActivityStatisticGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ActivityStatisticGroupByOutputType[P]>
            : GetScalarType<T[P], ActivityStatisticGroupByOutputType[P]>
        }
      >
    >


  export type activityStatisticSelect = {
    activity?: boolean
    user?: boolean
    timeSpent?: boolean
    experienceLevel?: boolean
    insight?: boolean
    activityType?: boolean | activityTypeArgs
    user_activityStatisticTouser?: boolean | userArgs
  }

  export type activityStatisticInclude = {
    activityType?: boolean | activityTypeArgs
    user_activityStatisticTouser?: boolean | userArgs
  }

  export type activityStatisticGetPayload<
    S extends boolean | null | undefined | activityStatisticArgs,
    U = keyof S
      > = S extends true
        ? activityStatistic
    : S extends undefined
    ? never
    : S extends activityStatisticArgs | activityStatisticFindManyArgs
    ?'include' extends U
    ? activityStatistic  & {
    [P in TrueKeys<S['include']>]:
        P extends 'activityType' ? activityTypeGetPayload<S['include'][P]> :
        P extends 'user_activityStatisticTouser' ? userGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'activityType' ? activityTypeGetPayload<S['select'][P]> :
        P extends 'user_activityStatisticTouser' ? userGetPayload<S['select'][P]> :  P extends keyof activityStatistic ? activityStatistic[P] : never
  } 
    : activityStatistic
  : activityStatistic


  type activityStatisticCountArgs = Merge<
    Omit<activityStatisticFindManyArgs, 'select' | 'include'> & {
      select?: ActivityStatisticCountAggregateInputType | true
    }
  >

  export interface activityStatisticDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one ActivityStatistic that matches the filter.
     * @param {activityStatisticFindUniqueArgs} args - Arguments to find a ActivityStatistic
     * @example
     * // Get one ActivityStatistic
     * const activityStatistic = await prisma.activityStatistic.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends activityStatisticFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, activityStatisticFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'activityStatistic'> extends True ? CheckSelect<T, Prisma__activityStatisticClient<activityStatistic>, Prisma__activityStatisticClient<activityStatisticGetPayload<T>>> : CheckSelect<T, Prisma__activityStatisticClient<activityStatistic | null >, Prisma__activityStatisticClient<activityStatisticGetPayload<T> | null >>

    /**
     * Find the first ActivityStatistic that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {activityStatisticFindFirstArgs} args - Arguments to find a ActivityStatistic
     * @example
     * // Get one ActivityStatistic
     * const activityStatistic = await prisma.activityStatistic.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends activityStatisticFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, activityStatisticFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'activityStatistic'> extends True ? CheckSelect<T, Prisma__activityStatisticClient<activityStatistic>, Prisma__activityStatisticClient<activityStatisticGetPayload<T>>> : CheckSelect<T, Prisma__activityStatisticClient<activityStatistic | null >, Prisma__activityStatisticClient<activityStatisticGetPayload<T> | null >>

    /**
     * Find zero or more ActivityStatistics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {activityStatisticFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ActivityStatistics
     * const activityStatistics = await prisma.activityStatistic.findMany()
     * 
     * // Get first 10 ActivityStatistics
     * const activityStatistics = await prisma.activityStatistic.findMany({ take: 10 })
     * 
     * // Only select the `activity`
     * const activityStatisticWithActivityOnly = await prisma.activityStatistic.findMany({ select: { activity: true } })
     * 
    **/
    findMany<T extends activityStatisticFindManyArgs>(
      args?: SelectSubset<T, activityStatisticFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<activityStatistic>>, PrismaPromise<Array<activityStatisticGetPayload<T>>>>

    /**
     * Create a ActivityStatistic.
     * @param {activityStatisticCreateArgs} args - Arguments to create a ActivityStatistic.
     * @example
     * // Create one ActivityStatistic
     * const ActivityStatistic = await prisma.activityStatistic.create({
     *   data: {
     *     // ... data to create a ActivityStatistic
     *   }
     * })
     * 
    **/
    create<T extends activityStatisticCreateArgs>(
      args: SelectSubset<T, activityStatisticCreateArgs>
    ): CheckSelect<T, Prisma__activityStatisticClient<activityStatistic>, Prisma__activityStatisticClient<activityStatisticGetPayload<T>>>

    /**
     * Create many ActivityStatistics.
     *     @param {activityStatisticCreateManyArgs} args - Arguments to create many ActivityStatistics.
     *     @example
     *     // Create many ActivityStatistics
     *     const activityStatistic = await prisma.activityStatistic.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends activityStatisticCreateManyArgs>(
      args?: SelectSubset<T, activityStatisticCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a ActivityStatistic.
     * @param {activityStatisticDeleteArgs} args - Arguments to delete one ActivityStatistic.
     * @example
     * // Delete one ActivityStatistic
     * const ActivityStatistic = await prisma.activityStatistic.delete({
     *   where: {
     *     // ... filter to delete one ActivityStatistic
     *   }
     * })
     * 
    **/
    delete<T extends activityStatisticDeleteArgs>(
      args: SelectSubset<T, activityStatisticDeleteArgs>
    ): CheckSelect<T, Prisma__activityStatisticClient<activityStatistic>, Prisma__activityStatisticClient<activityStatisticGetPayload<T>>>

    /**
     * Update one ActivityStatistic.
     * @param {activityStatisticUpdateArgs} args - Arguments to update one ActivityStatistic.
     * @example
     * // Update one ActivityStatistic
     * const activityStatistic = await prisma.activityStatistic.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends activityStatisticUpdateArgs>(
      args: SelectSubset<T, activityStatisticUpdateArgs>
    ): CheckSelect<T, Prisma__activityStatisticClient<activityStatistic>, Prisma__activityStatisticClient<activityStatisticGetPayload<T>>>

    /**
     * Delete zero or more ActivityStatistics.
     * @param {activityStatisticDeleteManyArgs} args - Arguments to filter ActivityStatistics to delete.
     * @example
     * // Delete a few ActivityStatistics
     * const { count } = await prisma.activityStatistic.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends activityStatisticDeleteManyArgs>(
      args?: SelectSubset<T, activityStatisticDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more ActivityStatistics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {activityStatisticUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ActivityStatistics
     * const activityStatistic = await prisma.activityStatistic.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends activityStatisticUpdateManyArgs>(
      args: SelectSubset<T, activityStatisticUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one ActivityStatistic.
     * @param {activityStatisticUpsertArgs} args - Arguments to update or create a ActivityStatistic.
     * @example
     * // Update or create a ActivityStatistic
     * const activityStatistic = await prisma.activityStatistic.upsert({
     *   create: {
     *     // ... data to create a ActivityStatistic
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ActivityStatistic we want to update
     *   }
     * })
    **/
    upsert<T extends activityStatisticUpsertArgs>(
      args: SelectSubset<T, activityStatisticUpsertArgs>
    ): CheckSelect<T, Prisma__activityStatisticClient<activityStatistic>, Prisma__activityStatisticClient<activityStatisticGetPayload<T>>>

    /**
     * Count the number of ActivityStatistics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {activityStatisticCountArgs} args - Arguments to filter ActivityStatistics to count.
     * @example
     * // Count the number of ActivityStatistics
     * const count = await prisma.activityStatistic.count({
     *   where: {
     *     // ... the filter for the ActivityStatistics we want to count
     *   }
     * })
    **/
    count<T extends activityStatisticCountArgs>(
      args?: Subset<T, activityStatisticCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ActivityStatisticCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ActivityStatistic.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityStatisticAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ActivityStatisticAggregateArgs>(args: Subset<T, ActivityStatisticAggregateArgs>): PrismaPromise<GetActivityStatisticAggregateType<T>>

    /**
     * Group by ActivityStatistic.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityStatisticGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ActivityStatisticGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ActivityStatisticGroupByArgs['orderBy'] }
        : { orderBy?: ActivityStatisticGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ActivityStatisticGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetActivityStatisticGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for activityStatistic.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__activityStatisticClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    activityType<T extends activityTypeArgs = {}>(args?: Subset<T, activityTypeArgs>): CheckSelect<T, Prisma__activityTypeClient<activityType | null >, Prisma__activityTypeClient<activityTypeGetPayload<T> | null >>;

    user_activityStatisticTouser<T extends userArgs = {}>(args?: Subset<T, userArgs>): CheckSelect<T, Prisma__userClient<user | null >, Prisma__userClient<userGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * activityStatistic findUnique
   */
  export type activityStatisticFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the activityStatistic
     * 
    **/
    select?: activityStatisticSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: activityStatisticInclude | null
    /**
     * Throw an Error if a activityStatistic can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which activityStatistic to fetch.
     * 
    **/
    where: activityStatisticWhereUniqueInput
  }


  /**
   * activityStatistic findFirst
   */
  export type activityStatisticFindFirstArgs = {
    /**
     * Select specific fields to fetch from the activityStatistic
     * 
    **/
    select?: activityStatisticSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: activityStatisticInclude | null
    /**
     * Throw an Error if a activityStatistic can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which activityStatistic to fetch.
     * 
    **/
    where?: activityStatisticWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of activityStatistics to fetch.
     * 
    **/
    orderBy?: Enumerable<activityStatisticOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for activityStatistics.
     * 
    **/
    cursor?: activityStatisticWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` activityStatistics from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` activityStatistics.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of activityStatistics.
     * 
    **/
    distinct?: Enumerable<ActivityStatisticScalarFieldEnum>
  }


  /**
   * activityStatistic findMany
   */
  export type activityStatisticFindManyArgs = {
    /**
     * Select specific fields to fetch from the activityStatistic
     * 
    **/
    select?: activityStatisticSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: activityStatisticInclude | null
    /**
     * Filter, which activityStatistics to fetch.
     * 
    **/
    where?: activityStatisticWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of activityStatistics to fetch.
     * 
    **/
    orderBy?: Enumerable<activityStatisticOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing activityStatistics.
     * 
    **/
    cursor?: activityStatisticWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` activityStatistics from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` activityStatistics.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ActivityStatisticScalarFieldEnum>
  }


  /**
   * activityStatistic create
   */
  export type activityStatisticCreateArgs = {
    /**
     * Select specific fields to fetch from the activityStatistic
     * 
    **/
    select?: activityStatisticSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: activityStatisticInclude | null
    /**
     * The data needed to create a activityStatistic.
     * 
    **/
    data: XOR<activityStatisticCreateInput, activityStatisticUncheckedCreateInput>
  }


  /**
   * activityStatistic createMany
   */
  export type activityStatisticCreateManyArgs = {
    /**
     * The data used to create many activityStatistics.
     * 
    **/
    data: Enumerable<activityStatisticCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * activityStatistic update
   */
  export type activityStatisticUpdateArgs = {
    /**
     * Select specific fields to fetch from the activityStatistic
     * 
    **/
    select?: activityStatisticSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: activityStatisticInclude | null
    /**
     * The data needed to update a activityStatistic.
     * 
    **/
    data: XOR<activityStatisticUpdateInput, activityStatisticUncheckedUpdateInput>
    /**
     * Choose, which activityStatistic to update.
     * 
    **/
    where: activityStatisticWhereUniqueInput
  }


  /**
   * activityStatistic updateMany
   */
  export type activityStatisticUpdateManyArgs = {
    /**
     * The data used to update activityStatistics.
     * 
    **/
    data: XOR<activityStatisticUpdateManyMutationInput, activityStatisticUncheckedUpdateManyInput>
    /**
     * Filter which activityStatistics to update
     * 
    **/
    where?: activityStatisticWhereInput
  }


  /**
   * activityStatistic upsert
   */
  export type activityStatisticUpsertArgs = {
    /**
     * Select specific fields to fetch from the activityStatistic
     * 
    **/
    select?: activityStatisticSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: activityStatisticInclude | null
    /**
     * The filter to search for the activityStatistic to update in case it exists.
     * 
    **/
    where: activityStatisticWhereUniqueInput
    /**
     * In case the activityStatistic found by the `where` argument doesn't exist, create a new activityStatistic with this data.
     * 
    **/
    create: XOR<activityStatisticCreateInput, activityStatisticUncheckedCreateInput>
    /**
     * In case the activityStatistic was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<activityStatisticUpdateInput, activityStatisticUncheckedUpdateInput>
  }


  /**
   * activityStatistic delete
   */
  export type activityStatisticDeleteArgs = {
    /**
     * Select specific fields to fetch from the activityStatistic
     * 
    **/
    select?: activityStatisticSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: activityStatisticInclude | null
    /**
     * Filter which activityStatistic to delete.
     * 
    **/
    where: activityStatisticWhereUniqueInput
  }


  /**
   * activityStatistic deleteMany
   */
  export type activityStatisticDeleteManyArgs = {
    /**
     * Filter which activityStatistics to delete
     * 
    **/
    where?: activityStatisticWhereInput
  }


  /**
   * activityStatistic without action
   */
  export type activityStatisticArgs = {
    /**
     * Select specific fields to fetch from the activityStatistic
     * 
    **/
    select?: activityStatisticSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: activityStatisticInclude | null
  }



  /**
   * Model activityType
   */


  export type AggregateActivityType = {
    _count: ActivityTypeCountAggregateOutputType | null
    _min: ActivityTypeMinAggregateOutputType | null
    _max: ActivityTypeMaxAggregateOutputType | null
  }

  export type ActivityTypeMinAggregateOutputType = {
    activityName: string | null
    distanceOrientated: boolean | null
  }

  export type ActivityTypeMaxAggregateOutputType = {
    activityName: string | null
    distanceOrientated: boolean | null
  }

  export type ActivityTypeCountAggregateOutputType = {
    activityName: number
    distanceOrientated: number
    _all: number
  }


  export type ActivityTypeMinAggregateInputType = {
    activityName?: true
    distanceOrientated?: true
  }

  export type ActivityTypeMaxAggregateInputType = {
    activityName?: true
    distanceOrientated?: true
  }

  export type ActivityTypeCountAggregateInputType = {
    activityName?: true
    distanceOrientated?: true
    _all?: true
  }

  export type ActivityTypeAggregateArgs = {
    /**
     * Filter which activityType to aggregate.
     * 
    **/
    where?: activityTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of activityTypes to fetch.
     * 
    **/
    orderBy?: Enumerable<activityTypeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: activityTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` activityTypes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` activityTypes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned activityTypes
    **/
    _count?: true | ActivityTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ActivityTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ActivityTypeMaxAggregateInputType
  }

  export type GetActivityTypeAggregateType<T extends ActivityTypeAggregateArgs> = {
        [P in keyof T & keyof AggregateActivityType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateActivityType[P]>
      : GetScalarType<T[P], AggregateActivityType[P]>
  }




  export type ActivityTypeGroupByArgs = {
    where?: activityTypeWhereInput
    orderBy?: Enumerable<activityTypeOrderByWithAggregationInput>
    by: Array<ActivityTypeScalarFieldEnum>
    having?: activityTypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ActivityTypeCountAggregateInputType | true
    _min?: ActivityTypeMinAggregateInputType
    _max?: ActivityTypeMaxAggregateInputType
  }


  export type ActivityTypeGroupByOutputType = {
    activityName: string
    distanceOrientated: boolean
    _count: ActivityTypeCountAggregateOutputType | null
    _min: ActivityTypeMinAggregateOutputType | null
    _max: ActivityTypeMaxAggregateOutputType | null
  }

  type GetActivityTypeGroupByPayload<T extends ActivityTypeGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ActivityTypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ActivityTypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ActivityTypeGroupByOutputType[P]>
            : GetScalarType<T[P], ActivityTypeGroupByOutputType[P]>
        }
      >
    >


  export type activityTypeSelect = {
    activityName?: boolean
    distanceOrientated?: boolean
    activityStatistic?: boolean | activityStatisticFindManyArgs
    _count?: boolean | ActivityTypeCountOutputTypeArgs
  }

  export type activityTypeInclude = {
    activityStatistic?: boolean | activityStatisticFindManyArgs
    _count?: boolean | ActivityTypeCountOutputTypeArgs
  }

  export type activityTypeGetPayload<
    S extends boolean | null | undefined | activityTypeArgs,
    U = keyof S
      > = S extends true
        ? activityType
    : S extends undefined
    ? never
    : S extends activityTypeArgs | activityTypeFindManyArgs
    ?'include' extends U
    ? activityType  & {
    [P in TrueKeys<S['include']>]:
        P extends 'activityStatistic' ? Array < activityStatisticGetPayload<S['include'][P]>>  :
        P extends '_count' ? ActivityTypeCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'activityStatistic' ? Array < activityStatisticGetPayload<S['select'][P]>>  :
        P extends '_count' ? ActivityTypeCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof activityType ? activityType[P] : never
  } 
    : activityType
  : activityType


  type activityTypeCountArgs = Merge<
    Omit<activityTypeFindManyArgs, 'select' | 'include'> & {
      select?: ActivityTypeCountAggregateInputType | true
    }
  >

  export interface activityTypeDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one ActivityType that matches the filter.
     * @param {activityTypeFindUniqueArgs} args - Arguments to find a ActivityType
     * @example
     * // Get one ActivityType
     * const activityType = await prisma.activityType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends activityTypeFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, activityTypeFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'activityType'> extends True ? CheckSelect<T, Prisma__activityTypeClient<activityType>, Prisma__activityTypeClient<activityTypeGetPayload<T>>> : CheckSelect<T, Prisma__activityTypeClient<activityType | null >, Prisma__activityTypeClient<activityTypeGetPayload<T> | null >>

    /**
     * Find the first ActivityType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {activityTypeFindFirstArgs} args - Arguments to find a ActivityType
     * @example
     * // Get one ActivityType
     * const activityType = await prisma.activityType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends activityTypeFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, activityTypeFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'activityType'> extends True ? CheckSelect<T, Prisma__activityTypeClient<activityType>, Prisma__activityTypeClient<activityTypeGetPayload<T>>> : CheckSelect<T, Prisma__activityTypeClient<activityType | null >, Prisma__activityTypeClient<activityTypeGetPayload<T> | null >>

    /**
     * Find zero or more ActivityTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {activityTypeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ActivityTypes
     * const activityTypes = await prisma.activityType.findMany()
     * 
     * // Get first 10 ActivityTypes
     * const activityTypes = await prisma.activityType.findMany({ take: 10 })
     * 
     * // Only select the `activityName`
     * const activityTypeWithActivityNameOnly = await prisma.activityType.findMany({ select: { activityName: true } })
     * 
    **/
    findMany<T extends activityTypeFindManyArgs>(
      args?: SelectSubset<T, activityTypeFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<activityType>>, PrismaPromise<Array<activityTypeGetPayload<T>>>>

    /**
     * Create a ActivityType.
     * @param {activityTypeCreateArgs} args - Arguments to create a ActivityType.
     * @example
     * // Create one ActivityType
     * const ActivityType = await prisma.activityType.create({
     *   data: {
     *     // ... data to create a ActivityType
     *   }
     * })
     * 
    **/
    create<T extends activityTypeCreateArgs>(
      args: SelectSubset<T, activityTypeCreateArgs>
    ): CheckSelect<T, Prisma__activityTypeClient<activityType>, Prisma__activityTypeClient<activityTypeGetPayload<T>>>

    /**
     * Create many ActivityTypes.
     *     @param {activityTypeCreateManyArgs} args - Arguments to create many ActivityTypes.
     *     @example
     *     // Create many ActivityTypes
     *     const activityType = await prisma.activityType.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends activityTypeCreateManyArgs>(
      args?: SelectSubset<T, activityTypeCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a ActivityType.
     * @param {activityTypeDeleteArgs} args - Arguments to delete one ActivityType.
     * @example
     * // Delete one ActivityType
     * const ActivityType = await prisma.activityType.delete({
     *   where: {
     *     // ... filter to delete one ActivityType
     *   }
     * })
     * 
    **/
    delete<T extends activityTypeDeleteArgs>(
      args: SelectSubset<T, activityTypeDeleteArgs>
    ): CheckSelect<T, Prisma__activityTypeClient<activityType>, Prisma__activityTypeClient<activityTypeGetPayload<T>>>

    /**
     * Update one ActivityType.
     * @param {activityTypeUpdateArgs} args - Arguments to update one ActivityType.
     * @example
     * // Update one ActivityType
     * const activityType = await prisma.activityType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends activityTypeUpdateArgs>(
      args: SelectSubset<T, activityTypeUpdateArgs>
    ): CheckSelect<T, Prisma__activityTypeClient<activityType>, Prisma__activityTypeClient<activityTypeGetPayload<T>>>

    /**
     * Delete zero or more ActivityTypes.
     * @param {activityTypeDeleteManyArgs} args - Arguments to filter ActivityTypes to delete.
     * @example
     * // Delete a few ActivityTypes
     * const { count } = await prisma.activityType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends activityTypeDeleteManyArgs>(
      args?: SelectSubset<T, activityTypeDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more ActivityTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {activityTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ActivityTypes
     * const activityType = await prisma.activityType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends activityTypeUpdateManyArgs>(
      args: SelectSubset<T, activityTypeUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one ActivityType.
     * @param {activityTypeUpsertArgs} args - Arguments to update or create a ActivityType.
     * @example
     * // Update or create a ActivityType
     * const activityType = await prisma.activityType.upsert({
     *   create: {
     *     // ... data to create a ActivityType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ActivityType we want to update
     *   }
     * })
    **/
    upsert<T extends activityTypeUpsertArgs>(
      args: SelectSubset<T, activityTypeUpsertArgs>
    ): CheckSelect<T, Prisma__activityTypeClient<activityType>, Prisma__activityTypeClient<activityTypeGetPayload<T>>>

    /**
     * Count the number of ActivityTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {activityTypeCountArgs} args - Arguments to filter ActivityTypes to count.
     * @example
     * // Count the number of ActivityTypes
     * const count = await prisma.activityType.count({
     *   where: {
     *     // ... the filter for the ActivityTypes we want to count
     *   }
     * })
    **/
    count<T extends activityTypeCountArgs>(
      args?: Subset<T, activityTypeCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ActivityTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ActivityType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ActivityTypeAggregateArgs>(args: Subset<T, ActivityTypeAggregateArgs>): PrismaPromise<GetActivityTypeAggregateType<T>>

    /**
     * Group by ActivityType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityTypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ActivityTypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ActivityTypeGroupByArgs['orderBy'] }
        : { orderBy?: ActivityTypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ActivityTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetActivityTypeGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for activityType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__activityTypeClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    activityStatistic<T extends activityStatisticFindManyArgs = {}>(args?: Subset<T, activityStatisticFindManyArgs>): CheckSelect<T, PrismaPromise<Array<activityStatistic>>, PrismaPromise<Array<activityStatisticGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * activityType findUnique
   */
  export type activityTypeFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the activityType
     * 
    **/
    select?: activityTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: activityTypeInclude | null
    /**
     * Throw an Error if a activityType can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which activityType to fetch.
     * 
    **/
    where: activityTypeWhereUniqueInput
  }


  /**
   * activityType findFirst
   */
  export type activityTypeFindFirstArgs = {
    /**
     * Select specific fields to fetch from the activityType
     * 
    **/
    select?: activityTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: activityTypeInclude | null
    /**
     * Throw an Error if a activityType can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which activityType to fetch.
     * 
    **/
    where?: activityTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of activityTypes to fetch.
     * 
    **/
    orderBy?: Enumerable<activityTypeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for activityTypes.
     * 
    **/
    cursor?: activityTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` activityTypes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` activityTypes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of activityTypes.
     * 
    **/
    distinct?: Enumerable<ActivityTypeScalarFieldEnum>
  }


  /**
   * activityType findMany
   */
  export type activityTypeFindManyArgs = {
    /**
     * Select specific fields to fetch from the activityType
     * 
    **/
    select?: activityTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: activityTypeInclude | null
    /**
     * Filter, which activityTypes to fetch.
     * 
    **/
    where?: activityTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of activityTypes to fetch.
     * 
    **/
    orderBy?: Enumerable<activityTypeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing activityTypes.
     * 
    **/
    cursor?: activityTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` activityTypes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` activityTypes.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ActivityTypeScalarFieldEnum>
  }


  /**
   * activityType create
   */
  export type activityTypeCreateArgs = {
    /**
     * Select specific fields to fetch from the activityType
     * 
    **/
    select?: activityTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: activityTypeInclude | null
    /**
     * The data needed to create a activityType.
     * 
    **/
    data: XOR<activityTypeCreateInput, activityTypeUncheckedCreateInput>
  }


  /**
   * activityType createMany
   */
  export type activityTypeCreateManyArgs = {
    /**
     * The data used to create many activityTypes.
     * 
    **/
    data: Enumerable<activityTypeCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * activityType update
   */
  export type activityTypeUpdateArgs = {
    /**
     * Select specific fields to fetch from the activityType
     * 
    **/
    select?: activityTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: activityTypeInclude | null
    /**
     * The data needed to update a activityType.
     * 
    **/
    data: XOR<activityTypeUpdateInput, activityTypeUncheckedUpdateInput>
    /**
     * Choose, which activityType to update.
     * 
    **/
    where: activityTypeWhereUniqueInput
  }


  /**
   * activityType updateMany
   */
  export type activityTypeUpdateManyArgs = {
    /**
     * The data used to update activityTypes.
     * 
    **/
    data: XOR<activityTypeUpdateManyMutationInput, activityTypeUncheckedUpdateManyInput>
    /**
     * Filter which activityTypes to update
     * 
    **/
    where?: activityTypeWhereInput
  }


  /**
   * activityType upsert
   */
  export type activityTypeUpsertArgs = {
    /**
     * Select specific fields to fetch from the activityType
     * 
    **/
    select?: activityTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: activityTypeInclude | null
    /**
     * The filter to search for the activityType to update in case it exists.
     * 
    **/
    where: activityTypeWhereUniqueInput
    /**
     * In case the activityType found by the `where` argument doesn't exist, create a new activityType with this data.
     * 
    **/
    create: XOR<activityTypeCreateInput, activityTypeUncheckedCreateInput>
    /**
     * In case the activityType was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<activityTypeUpdateInput, activityTypeUncheckedUpdateInput>
  }


  /**
   * activityType delete
   */
  export type activityTypeDeleteArgs = {
    /**
     * Select specific fields to fetch from the activityType
     * 
    **/
    select?: activityTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: activityTypeInclude | null
    /**
     * Filter which activityType to delete.
     * 
    **/
    where: activityTypeWhereUniqueInput
  }


  /**
   * activityType deleteMany
   */
  export type activityTypeDeleteManyArgs = {
    /**
     * Filter which activityTypes to delete
     * 
    **/
    where?: activityTypeWhereInput
  }


  /**
   * activityType without action
   */
  export type activityTypeArgs = {
    /**
     * Select specific fields to fetch from the activityType
     * 
    **/
    select?: activityTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: activityTypeInclude | null
  }



  /**
   * Model user
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    contactNumber: Decimal | null
  }

  export type UserSumAggregateOutputType = {
    contactNumber: Decimal | null
  }

  export type UserMinAggregateOutputType = {
    email: string | null
    firstName: string | null
    lastName: string | null
    contactNumber: Decimal | null
    gender: string | null
    location: string | null
    password: string | null
    dateOfBirth: string | null
  }

  export type UserMaxAggregateOutputType = {
    email: string | null
    firstName: string | null
    lastName: string | null
    contactNumber: Decimal | null
    gender: string | null
    location: string | null
    password: string | null
    dateOfBirth: string | null
  }

  export type UserCountAggregateOutputType = {
    email: number
    firstName: number
    lastName: number
    contactNumber: number
    gender: number
    location: number
    password: number
    dateOfBirth: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    contactNumber?: true
  }

  export type UserSumAggregateInputType = {
    contactNumber?: true
  }

  export type UserMinAggregateInputType = {
    email?: true
    firstName?: true
    lastName?: true
    contactNumber?: true
    gender?: true
    location?: true
    password?: true
    dateOfBirth?: true
  }

  export type UserMaxAggregateInputType = {
    email?: true
    firstName?: true
    lastName?: true
    contactNumber?: true
    gender?: true
    location?: true
    password?: true
    dateOfBirth?: true
  }

  export type UserCountAggregateInputType = {
    email?: true
    firstName?: true
    lastName?: true
    contactNumber?: true
    gender?: true
    location?: true
    password?: true
    dateOfBirth?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which user to aggregate.
     * 
    **/
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<userOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: userWhereInput
    orderBy?: Enumerable<userOrderByWithAggregationInput>
    by: Array<UserScalarFieldEnum>
    having?: userScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    email: string
    firstName: string
    lastName: string
    contactNumber: Decimal
    gender: string
    location: string
    password: string
    dateOfBirth: string
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type userSelect = {
    email?: boolean
    firstName?: boolean
    lastName?: boolean
    contactNumber?: boolean
    gender?: boolean
    location?: boolean
    password?: boolean
    dateOfBirth?: boolean
    activityStatistic?: boolean | activityStatisticFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type userInclude = {
    activityStatistic?: boolean | activityStatisticFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type userGetPayload<
    S extends boolean | null | undefined | userArgs,
    U = keyof S
      > = S extends true
        ? user
    : S extends undefined
    ? never
    : S extends userArgs | userFindManyArgs
    ?'include' extends U
    ? user  & {
    [P in TrueKeys<S['include']>]:
        P extends 'activityStatistic' ? Array < activityStatisticGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'activityStatistic' ? Array < activityStatisticGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof user ? user[P] : never
  } 
    : user
  : user


  type userCountArgs = Merge<
    Omit<userFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface userDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one User that matches the filter.
     * @param {userFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends userFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, userFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'user'> extends True ? CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>> : CheckSelect<T, Prisma__userClient<user | null >, Prisma__userClient<userGetPayload<T> | null >>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends userFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, userFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'user'> extends True ? CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>> : CheckSelect<T, Prisma__userClient<user | null >, Prisma__userClient<userGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `email`
     * const userWithEmailOnly = await prisma.user.findMany({ select: { email: true } })
     * 
    **/
    findMany<T extends userFindManyArgs>(
      args?: SelectSubset<T, userFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<user>>, PrismaPromise<Array<userGetPayload<T>>>>

    /**
     * Create a User.
     * @param {userCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends userCreateArgs>(
      args: SelectSubset<T, userCreateArgs>
    ): CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {userCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends userCreateManyArgs>(
      args?: SelectSubset<T, userCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {userDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends userDeleteArgs>(
      args: SelectSubset<T, userDeleteArgs>
    ): CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>>

    /**
     * Update one User.
     * @param {userUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends userUpdateArgs>(
      args: SelectSubset<T, userUpdateArgs>
    ): CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {userDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends userDeleteManyArgs>(
      args?: SelectSubset<T, userDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends userUpdateManyArgs>(
      args: SelectSubset<T, userUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {userUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends userUpsertArgs>(
      args: SelectSubset<T, userUpsertArgs>
    ): CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends userCountArgs>(
      args?: Subset<T, userCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for user.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__userClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    activityStatistic<T extends activityStatisticFindManyArgs = {}>(args?: Subset<T, activityStatisticFindManyArgs>): CheckSelect<T, PrismaPromise<Array<activityStatistic>>, PrismaPromise<Array<activityStatisticGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * user findUnique
   */
  export type userFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the user
     * 
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: userInclude | null
    /**
     * Throw an Error if a user can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which user to fetch.
     * 
    **/
    where: userWhereUniqueInput
  }


  /**
   * user findFirst
   */
  export type userFindFirstArgs = {
    /**
     * Select specific fields to fetch from the user
     * 
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: userInclude | null
    /**
     * Throw an Error if a user can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which user to fetch.
     * 
    **/
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<userOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     * 
    **/
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * user findMany
   */
  export type userFindManyArgs = {
    /**
     * Select specific fields to fetch from the user
     * 
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: userInclude | null
    /**
     * Filter, which users to fetch.
     * 
    **/
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<userOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     * 
    **/
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * user create
   */
  export type userCreateArgs = {
    /**
     * Select specific fields to fetch from the user
     * 
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: userInclude | null
    /**
     * The data needed to create a user.
     * 
    **/
    data: XOR<userCreateInput, userUncheckedCreateInput>
  }


  /**
   * user createMany
   */
  export type userCreateManyArgs = {
    /**
     * The data used to create many users.
     * 
    **/
    data: Enumerable<userCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * user update
   */
  export type userUpdateArgs = {
    /**
     * Select specific fields to fetch from the user
     * 
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: userInclude | null
    /**
     * The data needed to update a user.
     * 
    **/
    data: XOR<userUpdateInput, userUncheckedUpdateInput>
    /**
     * Choose, which user to update.
     * 
    **/
    where: userWhereUniqueInput
  }


  /**
   * user updateMany
   */
  export type userUpdateManyArgs = {
    /**
     * The data used to update users.
     * 
    **/
    data: XOR<userUpdateManyMutationInput, userUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     * 
    **/
    where?: userWhereInput
  }


  /**
   * user upsert
   */
  export type userUpsertArgs = {
    /**
     * Select specific fields to fetch from the user
     * 
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: userInclude | null
    /**
     * The filter to search for the user to update in case it exists.
     * 
    **/
    where: userWhereUniqueInput
    /**
     * In case the user found by the `where` argument doesn't exist, create a new user with this data.
     * 
    **/
    create: XOR<userCreateInput, userUncheckedCreateInput>
    /**
     * In case the user was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<userUpdateInput, userUncheckedUpdateInput>
  }


  /**
   * user delete
   */
  export type userDeleteArgs = {
    /**
     * Select specific fields to fetch from the user
     * 
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: userInclude | null
    /**
     * Filter which user to delete.
     * 
    **/
    where: userWhereUniqueInput
  }


  /**
   * user deleteMany
   */
  export type userDeleteManyArgs = {
    /**
     * Filter which users to delete
     * 
    **/
    where?: userWhereInput
  }


  /**
   * user without action
   */
  export type userArgs = {
    /**
     * Select specific fields to fetch from the user
     * 
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: userInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const ActivityStatisticScalarFieldEnum: {
    activity: 'activity',
    user: 'user',
    timeSpent: 'timeSpent',
    experienceLevel: 'experienceLevel',
    insight: 'insight'
  };

  export type ActivityStatisticScalarFieldEnum = (typeof ActivityStatisticScalarFieldEnum)[keyof typeof ActivityStatisticScalarFieldEnum]


  export const ActivityTypeScalarFieldEnum: {
    activityName: 'activityName',
    distanceOrientated: 'distanceOrientated'
  };

  export type ActivityTypeScalarFieldEnum = (typeof ActivityTypeScalarFieldEnum)[keyof typeof ActivityTypeScalarFieldEnum]


  export const UserScalarFieldEnum: {
    email: 'email',
    firstName: 'firstName',
    lastName: 'lastName',
    contactNumber: 'contactNumber',
    gender: 'gender',
    location: 'location',
    password: 'password',
    dateOfBirth: 'dateOfBirth'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Deep Input Types
   */


  export type activityStatisticWhereInput = {
    AND?: Enumerable<activityStatisticWhereInput>
    OR?: Enumerable<activityStatisticWhereInput>
    NOT?: Enumerable<activityStatisticWhereInput>
    activity?: StringFilter | string
    user?: StringFilter | string
    timeSpent?: DecimalFilter | Decimal | number | string
    experienceLevel?: StringFilter | string
    insight?: StringNullableFilter | string | null
    activityType?: XOR<ActivityTypeRelationFilter, activityTypeWhereInput>
    user_activityStatisticTouser?: XOR<UserRelationFilter, userWhereInput>
  }

  export type activityStatisticOrderByWithRelationInput = {
    activity?: SortOrder
    user?: SortOrder
    timeSpent?: SortOrder
    experienceLevel?: SortOrder
    insight?: SortOrder
    activityType?: activityTypeOrderByWithRelationInput
    user_activityStatisticTouser?: userOrderByWithRelationInput
  }

  export type activityStatisticWhereUniqueInput = {
    activity_user?: activityStatisticActivityUserCompoundUniqueInput
  }

  export type activityStatisticOrderByWithAggregationInput = {
    activity?: SortOrder
    user?: SortOrder
    timeSpent?: SortOrder
    experienceLevel?: SortOrder
    insight?: SortOrder
    _count?: activityStatisticCountOrderByAggregateInput
    _avg?: activityStatisticAvgOrderByAggregateInput
    _max?: activityStatisticMaxOrderByAggregateInput
    _min?: activityStatisticMinOrderByAggregateInput
    _sum?: activityStatisticSumOrderByAggregateInput
  }

  export type activityStatisticScalarWhereWithAggregatesInput = {
    AND?: Enumerable<activityStatisticScalarWhereWithAggregatesInput>
    OR?: Enumerable<activityStatisticScalarWhereWithAggregatesInput>
    NOT?: Enumerable<activityStatisticScalarWhereWithAggregatesInput>
    activity?: StringWithAggregatesFilter | string
    user?: StringWithAggregatesFilter | string
    timeSpent?: DecimalWithAggregatesFilter | Decimal | number | string
    experienceLevel?: StringWithAggregatesFilter | string
    insight?: StringNullableWithAggregatesFilter | string | null
  }

  export type activityTypeWhereInput = {
    AND?: Enumerable<activityTypeWhereInput>
    OR?: Enumerable<activityTypeWhereInput>
    NOT?: Enumerable<activityTypeWhereInput>
    activityName?: StringFilter | string
    distanceOrientated?: BoolFilter | boolean
    activityStatistic?: ActivityStatisticListRelationFilter
  }

  export type activityTypeOrderByWithRelationInput = {
    activityName?: SortOrder
    distanceOrientated?: SortOrder
    activityStatistic?: activityStatisticOrderByRelationAggregateInput
  }

  export type activityTypeWhereUniqueInput = {
    activityName?: string
  }

  export type activityTypeOrderByWithAggregationInput = {
    activityName?: SortOrder
    distanceOrientated?: SortOrder
    _count?: activityTypeCountOrderByAggregateInput
    _max?: activityTypeMaxOrderByAggregateInput
    _min?: activityTypeMinOrderByAggregateInput
  }

  export type activityTypeScalarWhereWithAggregatesInput = {
    AND?: Enumerable<activityTypeScalarWhereWithAggregatesInput>
    OR?: Enumerable<activityTypeScalarWhereWithAggregatesInput>
    NOT?: Enumerable<activityTypeScalarWhereWithAggregatesInput>
    activityName?: StringWithAggregatesFilter | string
    distanceOrientated?: BoolWithAggregatesFilter | boolean
  }

  export type userWhereInput = {
    AND?: Enumerable<userWhereInput>
    OR?: Enumerable<userWhereInput>
    NOT?: Enumerable<userWhereInput>
    email?: StringFilter | string
    firstName?: StringFilter | string
    lastName?: StringFilter | string
    contactNumber?: DecimalFilter | Decimal | number | string
    gender?: StringFilter | string
    location?: StringFilter | string
    password?: StringFilter | string
    dateOfBirth?: StringFilter | string
    activityStatistic?: ActivityStatisticListRelationFilter
  }

  export type userOrderByWithRelationInput = {
    email?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    contactNumber?: SortOrder
    gender?: SortOrder
    location?: SortOrder
    password?: SortOrder
    dateOfBirth?: SortOrder
    activityStatistic?: activityStatisticOrderByRelationAggregateInput
  }

  export type userWhereUniqueInput = {
    email?: string
  }

  export type userOrderByWithAggregationInput = {
    email?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    contactNumber?: SortOrder
    gender?: SortOrder
    location?: SortOrder
    password?: SortOrder
    dateOfBirth?: SortOrder
    _count?: userCountOrderByAggregateInput
    _avg?: userAvgOrderByAggregateInput
    _max?: userMaxOrderByAggregateInput
    _min?: userMinOrderByAggregateInput
    _sum?: userSumOrderByAggregateInput
  }

  export type userScalarWhereWithAggregatesInput = {
    AND?: Enumerable<userScalarWhereWithAggregatesInput>
    OR?: Enumerable<userScalarWhereWithAggregatesInput>
    NOT?: Enumerable<userScalarWhereWithAggregatesInput>
    email?: StringWithAggregatesFilter | string
    firstName?: StringWithAggregatesFilter | string
    lastName?: StringWithAggregatesFilter | string
    contactNumber?: DecimalWithAggregatesFilter | Decimal | number | string
    gender?: StringWithAggregatesFilter | string
    location?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    dateOfBirth?: StringWithAggregatesFilter | string
  }

  export type activityStatisticCreateInput = {
    timeSpent?: Decimal | number | string
    experienceLevel: string
    insight?: string | null
    activityType: activityTypeCreateNestedOneWithoutActivityStatisticInput
    user_activityStatisticTouser: userCreateNestedOneWithoutActivityStatisticInput
  }

  export type activityStatisticUncheckedCreateInput = {
    activity: string
    user: string
    timeSpent?: Decimal | number | string
    experienceLevel: string
    insight?: string | null
  }

  export type activityStatisticUpdateInput = {
    timeSpent?: DecimalFieldUpdateOperationsInput | Decimal | number | string
    experienceLevel?: StringFieldUpdateOperationsInput | string
    insight?: NullableStringFieldUpdateOperationsInput | string | null
    activityType?: activityTypeUpdateOneRequiredWithoutActivityStatisticInput
    user_activityStatisticTouser?: userUpdateOneRequiredWithoutActivityStatisticInput
  }

  export type activityStatisticUncheckedUpdateInput = {
    activity?: StringFieldUpdateOperationsInput | string
    user?: StringFieldUpdateOperationsInput | string
    timeSpent?: DecimalFieldUpdateOperationsInput | Decimal | number | string
    experienceLevel?: StringFieldUpdateOperationsInput | string
    insight?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type activityStatisticCreateManyInput = {
    activity: string
    user: string
    timeSpent?: Decimal | number | string
    experienceLevel: string
    insight?: string | null
  }

  export type activityStatisticUpdateManyMutationInput = {
    timeSpent?: DecimalFieldUpdateOperationsInput | Decimal | number | string
    experienceLevel?: StringFieldUpdateOperationsInput | string
    insight?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type activityStatisticUncheckedUpdateManyInput = {
    activity?: StringFieldUpdateOperationsInput | string
    user?: StringFieldUpdateOperationsInput | string
    timeSpent?: DecimalFieldUpdateOperationsInput | Decimal | number | string
    experienceLevel?: StringFieldUpdateOperationsInput | string
    insight?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type activityTypeCreateInput = {
    activityName: string
    distanceOrientated: boolean
    activityStatistic?: activityStatisticCreateNestedManyWithoutActivityTypeInput
  }

  export type activityTypeUncheckedCreateInput = {
    activityName: string
    distanceOrientated: boolean
    activityStatistic?: activityStatisticUncheckedCreateNestedManyWithoutActivityTypeInput
  }

  export type activityTypeUpdateInput = {
    activityName?: StringFieldUpdateOperationsInput | string
    distanceOrientated?: BoolFieldUpdateOperationsInput | boolean
    activityStatistic?: activityStatisticUpdateManyWithoutActivityTypeInput
  }

  export type activityTypeUncheckedUpdateInput = {
    activityName?: StringFieldUpdateOperationsInput | string
    distanceOrientated?: BoolFieldUpdateOperationsInput | boolean
    activityStatistic?: activityStatisticUncheckedUpdateManyWithoutActivityTypeInput
  }

  export type activityTypeCreateManyInput = {
    activityName: string
    distanceOrientated: boolean
  }

  export type activityTypeUpdateManyMutationInput = {
    activityName?: StringFieldUpdateOperationsInput | string
    distanceOrientated?: BoolFieldUpdateOperationsInput | boolean
  }

  export type activityTypeUncheckedUpdateManyInput = {
    activityName?: StringFieldUpdateOperationsInput | string
    distanceOrientated?: BoolFieldUpdateOperationsInput | boolean
  }

  export type userCreateInput = {
    email: string
    firstName: string
    lastName: string
    contactNumber: Decimal | number | string
    gender: string
    location: string
    password: string
    dateOfBirth: string
    activityStatistic?: activityStatisticCreateNestedManyWithoutUser_activityStatisticTouserInput
  }

  export type userUncheckedCreateInput = {
    email: string
    firstName: string
    lastName: string
    contactNumber: Decimal | number | string
    gender: string
    location: string
    password: string
    dateOfBirth: string
    activityStatistic?: activityStatisticUncheckedCreateNestedManyWithoutUser_activityStatisticTouserInput
  }

  export type userUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    contactNumber?: DecimalFieldUpdateOperationsInput | Decimal | number | string
    gender?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: StringFieldUpdateOperationsInput | string
    activityStatistic?: activityStatisticUpdateManyWithoutUser_activityStatisticTouserInput
  }

  export type userUncheckedUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    contactNumber?: DecimalFieldUpdateOperationsInput | Decimal | number | string
    gender?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: StringFieldUpdateOperationsInput | string
    activityStatistic?: activityStatisticUncheckedUpdateManyWithoutUser_activityStatisticTouserInput
  }

  export type userCreateManyInput = {
    email: string
    firstName: string
    lastName: string
    contactNumber: Decimal | number | string
    gender: string
    location: string
    password: string
    dateOfBirth: string
  }

  export type userUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    contactNumber?: DecimalFieldUpdateOperationsInput | Decimal | number | string
    gender?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: StringFieldUpdateOperationsInput | string
  }

  export type userUncheckedUpdateManyInput = {
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    contactNumber?: DecimalFieldUpdateOperationsInput | Decimal | number | string
    gender?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type DecimalFilter = {
    equals?: Decimal | number | string
    in?: Enumerable<Decimal> | Enumerable<number> | Enumerable<string>
    notIn?: Enumerable<Decimal> | Enumerable<number> | Enumerable<string>
    lt?: Decimal | number | string
    lte?: Decimal | number | string
    gt?: Decimal | number | string
    gte?: Decimal | number | string
    not?: NestedDecimalFilter | Decimal | number | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type ActivityTypeRelationFilter = {
    is?: activityTypeWhereInput
    isNot?: activityTypeWhereInput
  }

  export type UserRelationFilter = {
    is?: userWhereInput
    isNot?: userWhereInput
  }

  export type activityStatisticActivityUserCompoundUniqueInput = {
    activity: string
    user: string
  }

  export type activityStatisticCountOrderByAggregateInput = {
    activity?: SortOrder
    user?: SortOrder
    timeSpent?: SortOrder
    experienceLevel?: SortOrder
    insight?: SortOrder
  }

  export type activityStatisticAvgOrderByAggregateInput = {
    timeSpent?: SortOrder
  }

  export type activityStatisticMaxOrderByAggregateInput = {
    activity?: SortOrder
    user?: SortOrder
    timeSpent?: SortOrder
    experienceLevel?: SortOrder
    insight?: SortOrder
  }

  export type activityStatisticMinOrderByAggregateInput = {
    activity?: SortOrder
    user?: SortOrder
    timeSpent?: SortOrder
    experienceLevel?: SortOrder
    insight?: SortOrder
  }

  export type activityStatisticSumOrderByAggregateInput = {
    timeSpent?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type DecimalWithAggregatesFilter = {
    equals?: Decimal | number | string
    in?: Enumerable<Decimal> | Enumerable<number> | Enumerable<string>
    notIn?: Enumerable<Decimal> | Enumerable<number> | Enumerable<string>
    lt?: Decimal | number | string
    lte?: Decimal | number | string
    gt?: Decimal | number | string
    gte?: Decimal | number | string
    not?: NestedDecimalWithAggregatesFilter | Decimal | number | string
    _count?: NestedIntFilter
    _avg?: NestedDecimalFilter
    _sum?: NestedDecimalFilter
    _min?: NestedDecimalFilter
    _max?: NestedDecimalFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type ActivityStatisticListRelationFilter = {
    every?: activityStatisticWhereInput
    some?: activityStatisticWhereInput
    none?: activityStatisticWhereInput
  }

  export type activityStatisticOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type activityTypeCountOrderByAggregateInput = {
    activityName?: SortOrder
    distanceOrientated?: SortOrder
  }

  export type activityTypeMaxOrderByAggregateInput = {
    activityName?: SortOrder
    distanceOrientated?: SortOrder
  }

  export type activityTypeMinOrderByAggregateInput = {
    activityName?: SortOrder
    distanceOrientated?: SortOrder
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type userCountOrderByAggregateInput = {
    email?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    contactNumber?: SortOrder
    gender?: SortOrder
    location?: SortOrder
    password?: SortOrder
    dateOfBirth?: SortOrder
  }

  export type userAvgOrderByAggregateInput = {
    contactNumber?: SortOrder
  }

  export type userMaxOrderByAggregateInput = {
    email?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    contactNumber?: SortOrder
    gender?: SortOrder
    location?: SortOrder
    password?: SortOrder
    dateOfBirth?: SortOrder
  }

  export type userMinOrderByAggregateInput = {
    email?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    contactNumber?: SortOrder
    gender?: SortOrder
    location?: SortOrder
    password?: SortOrder
    dateOfBirth?: SortOrder
  }

  export type userSumOrderByAggregateInput = {
    contactNumber?: SortOrder
  }

  export type activityTypeCreateNestedOneWithoutActivityStatisticInput = {
    create?: XOR<activityTypeCreateWithoutActivityStatisticInput, activityTypeUncheckedCreateWithoutActivityStatisticInput>
    connectOrCreate?: activityTypeCreateOrConnectWithoutActivityStatisticInput
    connect?: activityTypeWhereUniqueInput
  }

  export type userCreateNestedOneWithoutActivityStatisticInput = {
    create?: XOR<userCreateWithoutActivityStatisticInput, userUncheckedCreateWithoutActivityStatisticInput>
    connectOrCreate?: userCreateOrConnectWithoutActivityStatisticInput
    connect?: userWhereUniqueInput
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | number | string
    increment?: Decimal | number | string
    decrement?: Decimal | number | string
    multiply?: Decimal | number | string
    divide?: Decimal | number | string
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type activityTypeUpdateOneRequiredWithoutActivityStatisticInput = {
    create?: XOR<activityTypeCreateWithoutActivityStatisticInput, activityTypeUncheckedCreateWithoutActivityStatisticInput>
    connectOrCreate?: activityTypeCreateOrConnectWithoutActivityStatisticInput
    upsert?: activityTypeUpsertWithoutActivityStatisticInput
    connect?: activityTypeWhereUniqueInput
    update?: XOR<activityTypeUpdateWithoutActivityStatisticInput, activityTypeUncheckedUpdateWithoutActivityStatisticInput>
  }

  export type userUpdateOneRequiredWithoutActivityStatisticInput = {
    create?: XOR<userCreateWithoutActivityStatisticInput, userUncheckedCreateWithoutActivityStatisticInput>
    connectOrCreate?: userCreateOrConnectWithoutActivityStatisticInput
    upsert?: userUpsertWithoutActivityStatisticInput
    connect?: userWhereUniqueInput
    update?: XOR<userUpdateWithoutActivityStatisticInput, userUncheckedUpdateWithoutActivityStatisticInput>
  }

  export type activityStatisticCreateNestedManyWithoutActivityTypeInput = {
    create?: XOR<Enumerable<activityStatisticCreateWithoutActivityTypeInput>, Enumerable<activityStatisticUncheckedCreateWithoutActivityTypeInput>>
    connectOrCreate?: Enumerable<activityStatisticCreateOrConnectWithoutActivityTypeInput>
    createMany?: activityStatisticCreateManyActivityTypeInputEnvelope
    connect?: Enumerable<activityStatisticWhereUniqueInput>
  }

  export type activityStatisticUncheckedCreateNestedManyWithoutActivityTypeInput = {
    create?: XOR<Enumerable<activityStatisticCreateWithoutActivityTypeInput>, Enumerable<activityStatisticUncheckedCreateWithoutActivityTypeInput>>
    connectOrCreate?: Enumerable<activityStatisticCreateOrConnectWithoutActivityTypeInput>
    createMany?: activityStatisticCreateManyActivityTypeInputEnvelope
    connect?: Enumerable<activityStatisticWhereUniqueInput>
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type activityStatisticUpdateManyWithoutActivityTypeInput = {
    create?: XOR<Enumerable<activityStatisticCreateWithoutActivityTypeInput>, Enumerable<activityStatisticUncheckedCreateWithoutActivityTypeInput>>
    connectOrCreate?: Enumerable<activityStatisticCreateOrConnectWithoutActivityTypeInput>
    upsert?: Enumerable<activityStatisticUpsertWithWhereUniqueWithoutActivityTypeInput>
    createMany?: activityStatisticCreateManyActivityTypeInputEnvelope
    set?: Enumerable<activityStatisticWhereUniqueInput>
    disconnect?: Enumerable<activityStatisticWhereUniqueInput>
    delete?: Enumerable<activityStatisticWhereUniqueInput>
    connect?: Enumerable<activityStatisticWhereUniqueInput>
    update?: Enumerable<activityStatisticUpdateWithWhereUniqueWithoutActivityTypeInput>
    updateMany?: Enumerable<activityStatisticUpdateManyWithWhereWithoutActivityTypeInput>
    deleteMany?: Enumerable<activityStatisticScalarWhereInput>
  }

  export type activityStatisticUncheckedUpdateManyWithoutActivityTypeInput = {
    create?: XOR<Enumerable<activityStatisticCreateWithoutActivityTypeInput>, Enumerable<activityStatisticUncheckedCreateWithoutActivityTypeInput>>
    connectOrCreate?: Enumerable<activityStatisticCreateOrConnectWithoutActivityTypeInput>
    upsert?: Enumerable<activityStatisticUpsertWithWhereUniqueWithoutActivityTypeInput>
    createMany?: activityStatisticCreateManyActivityTypeInputEnvelope
    set?: Enumerable<activityStatisticWhereUniqueInput>
    disconnect?: Enumerable<activityStatisticWhereUniqueInput>
    delete?: Enumerable<activityStatisticWhereUniqueInput>
    connect?: Enumerable<activityStatisticWhereUniqueInput>
    update?: Enumerable<activityStatisticUpdateWithWhereUniqueWithoutActivityTypeInput>
    updateMany?: Enumerable<activityStatisticUpdateManyWithWhereWithoutActivityTypeInput>
    deleteMany?: Enumerable<activityStatisticScalarWhereInput>
  }

  export type activityStatisticCreateNestedManyWithoutUser_activityStatisticTouserInput = {
    create?: XOR<Enumerable<activityStatisticCreateWithoutUser_activityStatisticTouserInput>, Enumerable<activityStatisticUncheckedCreateWithoutUser_activityStatisticTouserInput>>
    connectOrCreate?: Enumerable<activityStatisticCreateOrConnectWithoutUser_activityStatisticTouserInput>
    createMany?: activityStatisticCreateManyUser_activityStatisticTouserInputEnvelope
    connect?: Enumerable<activityStatisticWhereUniqueInput>
  }

  export type activityStatisticUncheckedCreateNestedManyWithoutUser_activityStatisticTouserInput = {
    create?: XOR<Enumerable<activityStatisticCreateWithoutUser_activityStatisticTouserInput>, Enumerable<activityStatisticUncheckedCreateWithoutUser_activityStatisticTouserInput>>
    connectOrCreate?: Enumerable<activityStatisticCreateOrConnectWithoutUser_activityStatisticTouserInput>
    createMany?: activityStatisticCreateManyUser_activityStatisticTouserInputEnvelope
    connect?: Enumerable<activityStatisticWhereUniqueInput>
  }

  export type activityStatisticUpdateManyWithoutUser_activityStatisticTouserInput = {
    create?: XOR<Enumerable<activityStatisticCreateWithoutUser_activityStatisticTouserInput>, Enumerable<activityStatisticUncheckedCreateWithoutUser_activityStatisticTouserInput>>
    connectOrCreate?: Enumerable<activityStatisticCreateOrConnectWithoutUser_activityStatisticTouserInput>
    upsert?: Enumerable<activityStatisticUpsertWithWhereUniqueWithoutUser_activityStatisticTouserInput>
    createMany?: activityStatisticCreateManyUser_activityStatisticTouserInputEnvelope
    set?: Enumerable<activityStatisticWhereUniqueInput>
    disconnect?: Enumerable<activityStatisticWhereUniqueInput>
    delete?: Enumerable<activityStatisticWhereUniqueInput>
    connect?: Enumerable<activityStatisticWhereUniqueInput>
    update?: Enumerable<activityStatisticUpdateWithWhereUniqueWithoutUser_activityStatisticTouserInput>
    updateMany?: Enumerable<activityStatisticUpdateManyWithWhereWithoutUser_activityStatisticTouserInput>
    deleteMany?: Enumerable<activityStatisticScalarWhereInput>
  }

  export type activityStatisticUncheckedUpdateManyWithoutUser_activityStatisticTouserInput = {
    create?: XOR<Enumerable<activityStatisticCreateWithoutUser_activityStatisticTouserInput>, Enumerable<activityStatisticUncheckedCreateWithoutUser_activityStatisticTouserInput>>
    connectOrCreate?: Enumerable<activityStatisticCreateOrConnectWithoutUser_activityStatisticTouserInput>
    upsert?: Enumerable<activityStatisticUpsertWithWhereUniqueWithoutUser_activityStatisticTouserInput>
    createMany?: activityStatisticCreateManyUser_activityStatisticTouserInputEnvelope
    set?: Enumerable<activityStatisticWhereUniqueInput>
    disconnect?: Enumerable<activityStatisticWhereUniqueInput>
    delete?: Enumerable<activityStatisticWhereUniqueInput>
    connect?: Enumerable<activityStatisticWhereUniqueInput>
    update?: Enumerable<activityStatisticUpdateWithWhereUniqueWithoutUser_activityStatisticTouserInput>
    updateMany?: Enumerable<activityStatisticUpdateManyWithWhereWithoutUser_activityStatisticTouserInput>
    deleteMany?: Enumerable<activityStatisticScalarWhereInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedDecimalFilter = {
    equals?: Decimal | number | string
    in?: Enumerable<Decimal> | Enumerable<number> | Enumerable<string>
    notIn?: Enumerable<Decimal> | Enumerable<number> | Enumerable<string>
    lt?: Decimal | number | string
    lte?: Decimal | number | string
    gt?: Decimal | number | string
    gte?: Decimal | number | string
    not?: NestedDecimalFilter | Decimal | number | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedDecimalWithAggregatesFilter = {
    equals?: Decimal | number | string
    in?: Enumerable<Decimal> | Enumerable<number> | Enumerable<string>
    notIn?: Enumerable<Decimal> | Enumerable<number> | Enumerable<string>
    lt?: Decimal | number | string
    lte?: Decimal | number | string
    gt?: Decimal | number | string
    gte?: Decimal | number | string
    not?: NestedDecimalWithAggregatesFilter | Decimal | number | string
    _count?: NestedIntFilter
    _avg?: NestedDecimalFilter
    _sum?: NestedDecimalFilter
    _min?: NestedDecimalFilter
    _max?: NestedDecimalFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type activityTypeCreateWithoutActivityStatisticInput = {
    activityName: string
    distanceOrientated: boolean
  }

  export type activityTypeUncheckedCreateWithoutActivityStatisticInput = {
    activityName: string
    distanceOrientated: boolean
  }

  export type activityTypeCreateOrConnectWithoutActivityStatisticInput = {
    where: activityTypeWhereUniqueInput
    create: XOR<activityTypeCreateWithoutActivityStatisticInput, activityTypeUncheckedCreateWithoutActivityStatisticInput>
  }

  export type userCreateWithoutActivityStatisticInput = {
    email: string
    firstName: string
    lastName: string
    contactNumber: Decimal | number | string
    gender: string
    location: string
    password: string
    dateOfBirth: string
  }

  export type userUncheckedCreateWithoutActivityStatisticInput = {
    email: string
    firstName: string
    lastName: string
    contactNumber: Decimal | number | string
    gender: string
    location: string
    password: string
    dateOfBirth: string
  }

  export type userCreateOrConnectWithoutActivityStatisticInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutActivityStatisticInput, userUncheckedCreateWithoutActivityStatisticInput>
  }

  export type activityTypeUpsertWithoutActivityStatisticInput = {
    update: XOR<activityTypeUpdateWithoutActivityStatisticInput, activityTypeUncheckedUpdateWithoutActivityStatisticInput>
    create: XOR<activityTypeCreateWithoutActivityStatisticInput, activityTypeUncheckedCreateWithoutActivityStatisticInput>
  }

  export type activityTypeUpdateWithoutActivityStatisticInput = {
    activityName?: StringFieldUpdateOperationsInput | string
    distanceOrientated?: BoolFieldUpdateOperationsInput | boolean
  }

  export type activityTypeUncheckedUpdateWithoutActivityStatisticInput = {
    activityName?: StringFieldUpdateOperationsInput | string
    distanceOrientated?: BoolFieldUpdateOperationsInput | boolean
  }

  export type userUpsertWithoutActivityStatisticInput = {
    update: XOR<userUpdateWithoutActivityStatisticInput, userUncheckedUpdateWithoutActivityStatisticInput>
    create: XOR<userCreateWithoutActivityStatisticInput, userUncheckedCreateWithoutActivityStatisticInput>
  }

  export type userUpdateWithoutActivityStatisticInput = {
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    contactNumber?: DecimalFieldUpdateOperationsInput | Decimal | number | string
    gender?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: StringFieldUpdateOperationsInput | string
  }

  export type userUncheckedUpdateWithoutActivityStatisticInput = {
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    contactNumber?: DecimalFieldUpdateOperationsInput | Decimal | number | string
    gender?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: StringFieldUpdateOperationsInput | string
  }

  export type activityStatisticCreateWithoutActivityTypeInput = {
    timeSpent?: Decimal | number | string
    experienceLevel: string
    insight?: string | null
    user_activityStatisticTouser: userCreateNestedOneWithoutActivityStatisticInput
  }

  export type activityStatisticUncheckedCreateWithoutActivityTypeInput = {
    user: string
    timeSpent?: Decimal | number | string
    experienceLevel: string
    insight?: string | null
  }

  export type activityStatisticCreateOrConnectWithoutActivityTypeInput = {
    where: activityStatisticWhereUniqueInput
    create: XOR<activityStatisticCreateWithoutActivityTypeInput, activityStatisticUncheckedCreateWithoutActivityTypeInput>
  }

  export type activityStatisticCreateManyActivityTypeInputEnvelope = {
    data: Enumerable<activityStatisticCreateManyActivityTypeInput>
    skipDuplicates?: boolean
  }

  export type activityStatisticUpsertWithWhereUniqueWithoutActivityTypeInput = {
    where: activityStatisticWhereUniqueInput
    update: XOR<activityStatisticUpdateWithoutActivityTypeInput, activityStatisticUncheckedUpdateWithoutActivityTypeInput>
    create: XOR<activityStatisticCreateWithoutActivityTypeInput, activityStatisticUncheckedCreateWithoutActivityTypeInput>
  }

  export type activityStatisticUpdateWithWhereUniqueWithoutActivityTypeInput = {
    where: activityStatisticWhereUniqueInput
    data: XOR<activityStatisticUpdateWithoutActivityTypeInput, activityStatisticUncheckedUpdateWithoutActivityTypeInput>
  }

  export type activityStatisticUpdateManyWithWhereWithoutActivityTypeInput = {
    where: activityStatisticScalarWhereInput
    data: XOR<activityStatisticUpdateManyMutationInput, activityStatisticUncheckedUpdateManyWithoutActivityStatisticInput>
  }

  export type activityStatisticScalarWhereInput = {
    AND?: Enumerable<activityStatisticScalarWhereInput>
    OR?: Enumerable<activityStatisticScalarWhereInput>
    NOT?: Enumerable<activityStatisticScalarWhereInput>
    activity?: StringFilter | string
    user?: StringFilter | string
    timeSpent?: DecimalFilter | Decimal | number | string
    experienceLevel?: StringFilter | string
    insight?: StringNullableFilter | string | null
  }

  export type activityStatisticCreateWithoutUser_activityStatisticTouserInput = {
    timeSpent?: Decimal | number | string
    experienceLevel: string
    insight?: string | null
    activityType: activityTypeCreateNestedOneWithoutActivityStatisticInput
  }

  export type activityStatisticUncheckedCreateWithoutUser_activityStatisticTouserInput = {
    activity: string
    timeSpent?: Decimal | number | string
    experienceLevel: string
    insight?: string | null
  }

  export type activityStatisticCreateOrConnectWithoutUser_activityStatisticTouserInput = {
    where: activityStatisticWhereUniqueInput
    create: XOR<activityStatisticCreateWithoutUser_activityStatisticTouserInput, activityStatisticUncheckedCreateWithoutUser_activityStatisticTouserInput>
  }

  export type activityStatisticCreateManyUser_activityStatisticTouserInputEnvelope = {
    data: Enumerable<activityStatisticCreateManyUser_activityStatisticTouserInput>
    skipDuplicates?: boolean
  }

  export type activityStatisticUpsertWithWhereUniqueWithoutUser_activityStatisticTouserInput = {
    where: activityStatisticWhereUniqueInput
    update: XOR<activityStatisticUpdateWithoutUser_activityStatisticTouserInput, activityStatisticUncheckedUpdateWithoutUser_activityStatisticTouserInput>
    create: XOR<activityStatisticCreateWithoutUser_activityStatisticTouserInput, activityStatisticUncheckedCreateWithoutUser_activityStatisticTouserInput>
  }

  export type activityStatisticUpdateWithWhereUniqueWithoutUser_activityStatisticTouserInput = {
    where: activityStatisticWhereUniqueInput
    data: XOR<activityStatisticUpdateWithoutUser_activityStatisticTouserInput, activityStatisticUncheckedUpdateWithoutUser_activityStatisticTouserInput>
  }

  export type activityStatisticUpdateManyWithWhereWithoutUser_activityStatisticTouserInput = {
    where: activityStatisticScalarWhereInput
    data: XOR<activityStatisticUpdateManyMutationInput, activityStatisticUncheckedUpdateManyWithoutActivityStatisticInput>
  }

  export type activityStatisticCreateManyActivityTypeInput = {
    user: string
    timeSpent?: Decimal | number | string
    experienceLevel: string
    insight?: string | null
  }

  export type activityStatisticUpdateWithoutActivityTypeInput = {
    timeSpent?: DecimalFieldUpdateOperationsInput | Decimal | number | string
    experienceLevel?: StringFieldUpdateOperationsInput | string
    insight?: NullableStringFieldUpdateOperationsInput | string | null
    user_activityStatisticTouser?: userUpdateOneRequiredWithoutActivityStatisticInput
  }

  export type activityStatisticUncheckedUpdateWithoutActivityTypeInput = {
    user?: StringFieldUpdateOperationsInput | string
    timeSpent?: DecimalFieldUpdateOperationsInput | Decimal | number | string
    experienceLevel?: StringFieldUpdateOperationsInput | string
    insight?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type activityStatisticUncheckedUpdateManyWithoutActivityStatisticInput = {
    user?: StringFieldUpdateOperationsInput | string
    timeSpent?: DecimalFieldUpdateOperationsInput | Decimal | number | string
    experienceLevel?: StringFieldUpdateOperationsInput | string
    insight?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type activityStatisticCreateManyUser_activityStatisticTouserInput = {
    activity: string
    timeSpent?: Decimal | number | string
    experienceLevel: string
    insight?: string | null
  }

  export type activityStatisticUpdateWithoutUser_activityStatisticTouserInput = {
    timeSpent?: DecimalFieldUpdateOperationsInput | Decimal | number | string
    experienceLevel?: StringFieldUpdateOperationsInput | string
    insight?: NullableStringFieldUpdateOperationsInput | string | null
    activityType?: activityTypeUpdateOneRequiredWithoutActivityStatisticInput
  }

  export type activityStatisticUncheckedUpdateWithoutUser_activityStatisticTouserInput = {
    activity?: StringFieldUpdateOperationsInput | string
    timeSpent?: DecimalFieldUpdateOperationsInput | Decimal | number | string
    experienceLevel?: StringFieldUpdateOperationsInput | string
    insight?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}